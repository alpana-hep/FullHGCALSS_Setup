#define AnalyzeHGCOctTB_cxx
#include <iostream>
#include <vector>
#include <cstring>
#include "AnalyzeHGCOctTB.h"
#include "Math/SMatrix.h"
#include "Math/SVector.h"
#include <math.h>
#include<TF1.h>
using namespace std;



// chip 3022,44,3028




int main(int argc, char* argv[])//, int argvv[])
{

  if (argc < 3) {
    cerr << "Please give 3 arguments " << "runList " << " " << "outputFileName" << " " << "energy" << endl;
    return -1;
  }
  const char *inputFileList = argv[1];
  const char *outFileName   = argv[2];
  const char *energy = argv[3];
  AnalyzeHGCOctTB hgcOctTB(inputFileList, outFileName, energy);
  //cout << "dataset " << data << " " << endl;
  //cout << "configuration " << config << " " << endl;
  cout << "energy " << energy << " " << endl;
  // int chi2_method = atoi(energy);
  hgcOctTB.EventLoop(energy);//, min_, max_);
  return 0;
}

void AnalyzeHGCOctTB::EventLoop(const char *energy) {


  if (fChain == 0) return;

  Long64_t nentries = fChain->GetEntriesFast();
  //Long64_t nentries3 = fChain3->GetEntriesFast();
  Long64_t hgc_jentry = 0;
  int Elist[85] =  {10, 14 , 18 , 22 , 26 , 30,  34 , 38 , 42,  46,  50,  54,  58,  62,  66,  70,  74,  78,
		    82,  86,  90,  94,  98, 102, 106, 110, 114 ,118, 122, 126, 130, 134, 138, 142 ,146, 150,
		    154 ,158 ,162 ,166 ,170 ,174 ,178, 182, 186, 190 ,194 ,198, 202, 206, 210, 214 ,218, 222,
		    226, 230, 234 ,238, 242 ,246 ,250, 254, 258 ,262 ,266, 270, 274, 278, 282, 286, 290, 294,
		    298, 302 ,306, 310, 314, 318 ,322, 326, 330, 334 ,338 ,342 ,346};

  cout << "nentries " << nentries << endl;
  //  cout << "Analyzing dataset " << data << " " << endl;

  Long64_t nbytes = 0, nb = 0;
  Long64_t nbytes2 = 0, nb2 = 0;
  Long64_t nbytes3 = 0, nb3 = 0;

  int decade = 0;
  
  bool DEBUG=false;
  //counter
  int nHgc=0, nAhc=0, nrechits=0;
  Long64_t jentry;

  int count[350]={};
  float lambda[79];
  //  nentries=1000;
  for (jentry=0; jentry<nentries;jentry++,hgc_jentry++)
  {
    //   for (jentry=0; jentry<10000;jentry++,hgc_jentry++) {
    // ==============print number of events done == == == == == == == =
      double progress = 10.0 * jentry / (1.0 * nentries);
      int k = int (progress);
      if (k > decade)
	cout << 10 * k << " %" << endl;
      decade = k;
      if(jentry%10000==0)
	
	cout<<"entre:  "<<jentry<<endl;
      // ===============read this entry == == == == == == == == == == ==

      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) { break; cout<<"Breaking"<<endl;}
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      //cout<<"insides the event loop: check1"<<endl;

      ////   MESSAGE ////
      // apparently code is not running beyond this point ///
      h_beamenergy->Fill(genEt);
      // h_particle->Fill(genId);
      h_true_beamenergy->Fill(genEn);
      for (int i=10;i<351;i++)
	{
	  if(int(genEt)==i)
	    {
	      count[i]++;
	    }
	}
      // //cout<<sizeof(hit_en[jentry])<<endl;
      int Nrechits[5]={};
      int Nrechit_en[5][85]={};
      int total_Energy[5][85]={};
      double dr_cutValues[5]={0,0.1,0.2,0.3,0.5};
      int total_nrechits[5][85];
      for(int i=0;i<nhits;i++)
      	{
      	  //if(hit_dR[i]>0.1) continue;
	  for(int j=0;j<5;j++)
	    {
	      if(j==0)
	  	{
	  	  Nrechits[j]++;
	  	  h_rechitEnergy_Mips[j]->Fill(hit_men[i]);
	  	  h_rechitEnergy_MeV[j]->Fill(0.001*hit_en[i]);
	  	  h_dR[j]->Fill(hit_dR[i]);
	  	  h_dR_rechitEnergy[j]->Fill(hit_men[i],hit_dR[i]);
	  	  h_dR_rechitEnergy_GeV[j]->Fill(0.001*hit_en[i],hit_dR[i]);
	  	  h_rechitX[j]->Fill(hit_x[i]);
	  	  h_rechitY[j]->Fill(hit_y[i]);
	  	  h_rechitZ[j]->Fill(hit_z[i]);
		  // for (int k=0;k<85;k++)
		  //   {
		  //     if(Elist[k]-2<=genEt<=Elist[k]+2)
		  // 	{
		  // 	  total_nrechits[j][k]++;
		  // 	  h_bin_rechitEn_Mips[j][k]->Fill(hit_men[i]);
		  // 	  h_bin_rechitEn[j][k]->Fill(0.001*hit_en[i]);
		  // 	  h_bin_rechitX[j][k]->Fill(hit_x[i]);
		  // 	  h_bin_rechitY[j][k]->Fill(hit_y[i]);
		  // 	  h_bin_rechitZ[j][k]->Fill(hit_z[i]);
		  // 	  total_Energy[j][k]+=(0.001*hit_en[i]);
		  // 	}
		  //   }
	      	}
	      else
	      	{
	      	  if(hit_dR[i]>dr_cutValues[j]) continue;
	      	  else
	      	    {
	      	      Nrechits[j]++;
	      	      h_rechitEnergy_Mips[j]->Fill(hit_men[i]);
	      	      h_rechitEnergy_MeV[j]->Fill(0.001*hit_en[i]);
	      	      h_dR[j]->Fill(hit_dR[i]);
	      	      h_dR_rechitEnergy[j]->Fill(hit_men[i],hit_dR[i]);
	      	      h_dR_rechitEnergy_GeV[j]->Fill(0.001*hit_en[i],hit_dR[i]);
	      	      h_rechitX[j]->Fill(hit_x[i]);
	      	      h_rechitY[j]->Fill(hit_y[i]);
	      	      h_rechitZ[j]->Fill(hit_z[i]);
		      // for (int k=0;k<85;k++)
		      // 	{
		      // 	  if(Elist[k]-2<=genEt<=Elist[k]+2)
		      // 	    {
		      // 	      total_nrechits[j][k]++;

		      // 	      h_bin_rechitEn_Mips[j][k]->Fill(hit_men[i]);
		      // 	      h_bin_rechitEn[j][k]->Fill(0.001*hit_en[i]);
		      // 	      h_bin_rechitX[j][k]->Fill(hit_x[i]);
		      // 	      h_bin_rechitY[j][k]->Fill(hit_y[i]);
		      // 	      h_bin_rechitZ[j][k]->Fill(hit_z[i]);
		      // 	      total_Energy[j][k]+=(0.001*hit_en[i]);
		      // 	    }
		      // 	}
	// 	    }
		    }
			  
		}
	    }
	}
      //cout<<nhits<<endl;
      //h_nhits->Fill(nhits);
      for(int j=0;j<5;j++)
      	{
      	  h_nhits[j]->Fill(Nrechits[j]);
      	  for (int k=0;k<85;k++)
      	    {
      	      if(Elist[k]-2<=genEt<=Elist[k]+2)
      	  	{
      	  	  h_bin_TotalrechitEn[j][k]->Fill( total_Energy[j][k]);
      	  	  h_bin_nrechits[j][k]->Fill(total_nrechits[j][k]);
      	  	}
      	    }
      	}
      // totalEnergy_inGeV=0;
      // EnergySum_SSinEE=0;
      // EnergySum_SSinFH=0;
      // Esum_rechits_FH=0;
      // Esum_rechits_EE=0;
      // Esum_rechits_AH=0;
      // Esum_rechits_FH_inGeV=0;
      // Esum_rechits_EE_inGeV=0;
      // Esum_rechits_AH_inGeV=0;
      
      // ////////////////////////////////////////////
      // //            HGCAL Part                  //
      // ////////////////////////////////////////////
      // total_rechits=0;
      // rechits_EE=0;
      // rechits_FH=0;
      // rechits_AH=0;
      // if(event ==3482)
      // 	{	//	continue;
      if(DEBUG) cout<<"DEBUG: Start Analylizing HGCAL  RecHits!!"<<endl;
      // total_rechits_energy_EE=0;
      // total_rechits_energy_FH=0;
      if(DEBUG) cout<<"DEBUG: End of Entry = "<<jentry<<endl;
      if(DEBUG) cout<<"DEBUG: ****************** "<<endl;
      
      //if(DEBUG && jentry > 10) break;
      //      gSystem->Exit(0);
      //if(jentry > 2) break;
      //pion_tree->Fill();
    } // loop overentries
  //  char* name = new char[1000];


  // cout<<endl<<endl;


  // ///////////////////////////////////////////////////////////
  // ///////  E N D     O F     E N T R Y     L O O P     //////
  // ///////////////////////////////////////////////////////////
  // //  gSystem->Exit(0);
  char* name1 = new char[1000];
  sprintf(name1,"./events_vs_energy.txt");
  std::ofstream file_H_;
  file_H_.open(name1,ios::out);

  cout<<"Got Out "<<endl;
  for (int i=10;i<351;i++)
    {
      file_H_<<i<<"\t"<<count[i]<<"\n";
    }
  // cout<<count_fh<<endl;
  // cout<<count_badtrack<<endl;
  // oFile->cd();
  // oFile->Write();
  // oFile->Close();

}
